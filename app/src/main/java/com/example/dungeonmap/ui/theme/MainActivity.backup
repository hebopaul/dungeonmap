package com.example.dungeonmap

import android.os.Bundle
import androidx.activity.ComponentActivity
import androidx.activity.compose.setContent
import androidx.compose.animation.animateContentSize
import androidx.compose.foundation.Image
import androidx.compose.foundation.gestures.rememberTransformableState
import androidx.compose.foundation.gestures.transformable
import androidx.compose.foundation.layout.Box
import androidx.compose.foundation.layout.fillMaxHeight
import androidx.compose.foundation.layout.fillMaxSize
import androidx.compose.material.icons.Icons
import androidx.compose.material.icons.filled.Lock
import androidx.compose.material.icons.filled.LockOpen
import androidx.compose.material3.Icon
import androidx.compose.material3.IconButton
import androidx.compose.material3.MaterialTheme
import androidx.compose.material3.Surface
import androidx.compose.runtime.Composable
import androidx.compose.runtime.MutableState
import androidx.compose.runtime.getValue
import androidx.compose.runtime.setValue
import androidx.compose.runtime.mutableStateOf
import androidx.compose.runtime.remember
import androidx.compose.ui.Alignment
import androidx.compose.ui.Modifier
import androidx.compose.ui.draw.alpha
import androidx.compose.ui.geometry.Offset
import androidx.compose.ui.graphics.Color
import androidx.compose.ui.graphics.graphicsLayer
import androidx.compose.ui.res.painterResource
import androidx.compose.ui.tooling.preview.Preview
import com.example.dungeonmap.ui.theme.DungeonMapTheme

class MainActivity : ComponentActivity() {
    override fun onCreate(savedInstanceState: Bundle?) {
        super.onCreate(savedInstanceState)
        setContent {
            DungeonMapTheme {
                DungeonMapApp()
            }
        }
    }
}


@Composable
fun DungeonMapApp() {
    TerrainScreen()
}

@Composable
fun Terrain() {

}

@Composable
fun TerrainUI() {

}

@Composable
fun TerrainScreen() {

    //Prepping the variables that will hold the state of
    //the map to enable dragging and zooming
    var scale by remember { mutableStateOf(1f) }
    var offset by remember { mutableStateOf(Offset.Zero) }

    //This enables the user to lock the zoom of the map
    var lockedScale by remember {mutableStateOf(false)}

    //Since there will be tokens representing characters on the map
    //we are going to need a shared modifier that keeps all the composables
    //that use it, moving as one, with each other, and with the terrain when
    //dragging or zooming on it.
    var connectedModifier  = Modifier
        .transformable(
            state = rememberTransformableState { zoomChange, offsetChange, rotation ->
                if (!lockedScale) scale *= zoomChange
                offset += offsetChange
            }
        )
        .graphicsLayer {
            scaleX = scale.coerceIn(0.4F, 10F); scaleY = scale.coerceIn(0.4F, 10F)
            translationX = offset.x; translationY = offset.y
            println("Offset X = $translationX   -   Offset Y = $translationY   -   Scale = $scaleX")
        }
        .animateContentSize()

    Box(
        modifier = Modifier
            .fillMaxSize(),

    ) {
        Image(
            modifier = connectedModifier,
            contentDescription = "Imported image",
            painter = painterResource(R.drawable.m03_tombofhorrors_300),


            )
        Box(
            modifier = Modifier
                .fillMaxSize(),
            contentAlignment = Alignment.BottomEnd
        ){
            IconButton(
                onClick = { lockedScale = !lockedScale },
                content = {
                    Icon(
                        if (lockedScale) Icons.Filled.Lock else Icons.Filled.LockOpen,
                        contentDescription = "Locked scale icon",
                        tint = Color.Black
                    )
                }
            )
        }

    }


}






@Preview
@Composable
fun testing () {
    Box(
        modifier = Modifier
            .fillMaxHeight(),
        contentAlignment = Alignment.BottomEnd

    ){
        Image(
            painterResource (R.drawable.m03_tombofhorrors_300), ""
        )
        IconButton(

            onClick = { /*TODO*/ },
            content = {
                Icon(Icons.Filled.Lock, "")
            }
        )
    }
}